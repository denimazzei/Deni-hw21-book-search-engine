{"version":3,"sources":["utils/auth.js","utils/localStorage.js","utils/mutations.js","utils/queries.js","pages/SearchBooks.js","utils/API.js","pages/SavedBooks.js","components/SignupForm.js","components/LoginForm.js","components/Navbar.js","App.js","index.js"],"names":["decode","this","getToken","token","isTokenExpired","exp","Date","now","err","localStorage","getItem","idToken","setItem","window","location","assign","removeItem","removeBookId","bookId","savedBookIds","JSON","parse","updatedSavedBookIds","filter","savedBookId","stringify","LOGIN_USER","gql","ADD_USER","SAVE_BOOK","REMOVE_BOOK","GET_ME","SearchBooks","useState","searchedBooks","setSearchedBooks","searchInput","setSearchInput","setSavedBookIds","useMutation","saveBook","useEffect","bookIdArr","length","handleFormSubmit","event","a","preventDefault","fetch","response","ok","Error","json","items","bookData","map","book","id","authors","volumeInfo","title","description","image","imageLinks","thumbnail","console","error","handleSaveBook","bookToSave","find","Auth","loggedIn","variables","update","cache","me","readQuery","query","writeQuery","data","savedBooks","Jumbotron","fluid","className","Container","Form","onSubmit","Row","Col","xs","md","Control","name","value","onChange","e","target","type","size","placeholder","Button","variant","CardColumns","Card","key","border","Img","src","alt","Body","Title","Text","disabled","some","onClick","SavedBooks","useQuery","loading","removeBook","userData","log","username","handleDeleteBook","SignupForm","email","password","userFormData","setUserFormData","validated","showAlert","setShowAlert","addUser","handleInputChange","currentTarget","checkValidity","stopPropagation","login","noValidate","Alert","dismissible","onClose","show","Group","Label","htmlFor","required","Feedback","LoginForm","loginUser","AppNavbar","showModal","setShowModal","Navbar","bg","expand","Brand","as","Link","to","Toggle","aria-controls","Collapse","Nav","logout","Modal","onHide","aria-labelledby","Tab","defaultActiveKey","Header","closeButton","Item","eventKey","Content","Pane","handleModalClose","client","ApolloClient","uri","InMemoryCache","App","ApolloProvider","exact","path","component","render","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.8da87473.chunk.js","sourcesContent":["// use this to decode a token and get the user's information out of it\nimport decode from 'jwt-decode';\n\n// create a new class to instantiate for a user\nclass AuthService {\n  // get user data\n  getProfile() {\n    return decode(this.getToken());\n  }\n\n  // check if user's logged in\n  loggedIn() {\n    // Checks if there is a saved token and it's still valid\n    const token = this.getToken();\n    return !!token && !this.isTokenExpired(token); // handwaiving here\n  }\n\n  // check if token is expired\n  isTokenExpired(token) {\n    try {\n      const decoded = decode(token);\n      if (decoded.exp < Date.now() / 1000) {\n        return true;\n      } else return false;\n    } catch (err) {\n      return false;\n    }\n  }\n\n  getToken() {\n    // Retrieves the user token from localStorage\n    return localStorage.getItem('id_token');\n  }\n\n  login(idToken) {\n    // Saves user token to localStorage\n    localStorage.setItem('id_token', idToken);\n    window.location.assign('/');\n  }\n\n  logout() {\n    // Clear user token and profile data from localStorage\n    localStorage.removeItem('id_token');\n    // this will reload the page and reset the state of the application\n    window.location.assign('/');\n  }\n}\n\nexport default new AuthService();\n","export const getSavedBookIds = () => {\n  const savedBookIds = localStorage.getItem('saved_books')\n    ? JSON.parse(localStorage.getItem('saved_books'))\n    : [];\n\n  return savedBookIds;\n};\n\nexport const saveBookIds = (bookIdArr) => {\n  if (bookIdArr.length) {\n    localStorage.setItem('saved_books', JSON.stringify(bookIdArr));\n  } else {\n    localStorage.removeItem('saved_books');\n  }\n};\n\nexport const removeBookId = (bookId) => {\n  const savedBookIds = localStorage.getItem('saved_books')\n    ? JSON.parse(localStorage.getItem('saved_books'))\n    : null;\n\n  if (!savedBookIds) {\n    return false;\n  }\n\n  const updatedSavedBookIds = savedBookIds?.filter((savedBookId) => savedBookId !== bookId);\n  localStorage.setItem('saved_books', JSON.stringify(updatedSavedBookIds));\n\n  return true;\n};\n","import { gql } from \"@apollo/client\";\n\nexport const LOGIN_USER = gql`\n  mutation login($email: String!, $password: String!) {\n    login(email: $email, password: $password) {\n      token\n      user {\n        _id\n        username\n      }\n    }\n  }\n`;\n\nexport const ADD_USER = gql`\n  mutation addUser($username: String!, $email: String!, $password: String!) {\n    addUser(username: $username, email: $email, password: $password) {\n      token\n      user {\n        _id\n        username\n      }\n    }\n  }\n`;\n\nexport const SAVE_BOOK = gql`\n  mutation saveBook($book: SavedBookInput!) {\n    saveBook(book: $book) {\n      username\n      email\n      savedBooks {\n        bookId\n        authors\n        description\n        image\n        link\n        title\n      }\n    }\n  }\n`;\n\nexport const REMOVE_BOOK = gql`\n  mutation removeBook($bookId: String!) {\n    removeBook(bookId: $bookId) {\n      username\n      email\n      savedBooks {\n        bookId\n        authors\n        description\n        image\n        link\n        title\n      }\n    }\n  }\n`;\n","import { gql } from \"@apollo/client\";\n\nexport const GET_ME = gql`\n  {\n    me {\n      _id\n      username\n      email\n      savedBooks {\n        authors\n        description\n        bookId\n        image\n        link\n        title\n      }\n    }\n  }\n`;\n","import React, { useState, useEffect } from \"react\";\nimport {\n  Jumbotron,\n  Container,\n  Col,\n  Form,\n  Button,\n  Card,\n  CardColumns,\n} from \"react-bootstrap\";\n\nimport Auth from \"../utils/auth\";\nimport { useMutation } from \"@apollo/client\";\nimport { searchGoogleBooks } from \"../utils/API\";\nimport { saveBookIds, getSavedBookIds } from \"../utils/localStorage\";\nimport { SAVE_BOOK } from \"../utils/mutations\";\nimport { GET_ME } from \"../utils/queries\";\n\nconst SearchBooks = () => {\n  // create state for holding returned google api data\n  const [searchedBooks, setSearchedBooks] = useState([]);\n  // create state for holding our search field data\n  const [searchInput, setSearchInput] = useState(\"\");\n\n  // create state to hold saved bookId values\n  const [savedBookIds, setSavedBookIds] = useState(getSavedBookIds());\n\n  const [saveBook] = useMutation(SAVE_BOOK);\n\n  // set up useEffect hook to save `savedBookIds` list to localStorage on component unmount\n  // learn more here: https://reactjs.org/docs/hooks-effect.html#effects-with-cleanup\n  useEffect(() => {\n    return () => saveBookIds(savedBookIds);\n  });\n\n  // create method to search for books and set state on form submit\n  const handleFormSubmit = async (event) => {\n    event.preventDefault();\n\n    if (!searchInput) {\n      return false;\n    }\n\n    try {\n      const response = await searchGoogleBooks(searchInput);\n\n      if (!response.ok) {\n        throw new Error(\"something went wrong!\");\n      }\n\n      const { items } = await response.json();\n\n      const bookData = items.map((book) => ({\n        bookId: book.id,\n        authors: book.volumeInfo.authors || [\"No author to display\"],\n        title: book.volumeInfo.title,\n        description: book.volumeInfo.description,\n        image: book.volumeInfo.imageLinks?.thumbnail || \"\",\n      }));\n\n      setSearchedBooks(bookData);\n      setSearchInput(\"\");\n    } catch (err) {\n      console.error(err);\n    }\n  };\n\n  // create function to handle saving a book to our database\n  const handleSaveBook = async (bookId) => {\n    // find the book in `searchedBooks` state by the matching id\n    const bookToSave = searchedBooks.find((book) => book.bookId === bookId);\n\n    // get token\n    const token = Auth.loggedIn() ? Auth.getToken() : null;\n\n    if (!token) {\n      return false;\n    }\n\n    try {\n      await saveBook({\n        variables: { book: bookToSave },\n        update: (cache) => {\n          const { me } = cache.readQuery({ query: GET_ME });\n          cache.writeQuery({\n            query: GET_ME,\n            data: { me: { ...me, savedBooks: [...me.savedBooks, bookToSave] } },\n          });\n        },\n      });\n\n      // if book successfully saves to user's account, save book id to state\n      setSavedBookIds([...savedBookIds, bookToSave.bookId]);\n    } catch (err) {\n      console.error(err);\n    }\n  };\n\n  return (\n    <>\n      <Jumbotron fluid className=\"text-light bg-dark\">\n        <Container>\n          <h1>Search for Books!</h1>\n          <Form onSubmit={handleFormSubmit}>\n            <Form.Row>\n              <Col xs={12} md={8}>\n                <Form.Control\n                  name=\"searchInput\"\n                  value={searchInput}\n                  onChange={(e) => setSearchInput(e.target.value)}\n                  type=\"text\"\n                  size=\"lg\"\n                  placeholder=\"Search for a book\"\n                />\n              </Col>\n              <Col xs={12} md={4}>\n                <Button type=\"submit\" variant=\"success\" size=\"lg\">\n                  Submit Search\n                </Button>\n              </Col>\n            </Form.Row>\n          </Form>\n        </Container>\n      </Jumbotron>\n\n      <Container>\n        <h2>\n          {searchedBooks.length\n            ? `Viewing ${searchedBooks.length} results:`\n            : \"Search for a book to begin\"}\n        </h2>\n        <CardColumns>\n          {searchedBooks.map((book) => {\n            return (\n              <Card key={book.bookId} border=\"dark\">\n                {book.image ? (\n                  <Card.Img\n                    src={book.image}\n                    alt={`The cover for ${book.title}`}\n                    variant=\"top\"\n                  />\n                ) : null}\n                <Card.Body>\n                  <Card.Title>{book.title}</Card.Title>\n                  <p className=\"small\">Authors: {book.authors}</p>\n                  <Card.Text>{book.description}</Card.Text>\n                  {Auth.loggedIn() && (\n                    <Button\n                      disabled={savedBookIds?.some(\n                        (savedBookId) => savedBookId === book.bookId\n                      )}\n                      className=\"btn-block btn-info\"\n                      onClick={() => handleSaveBook(book.bookId)}\n                    >\n                      {savedBookIds?.some(\n                        (savedBookId) => savedBookId === book.bookId\n                      )\n                        ? \"This book has already been saved!\"\n                        : \"Save this Book!\"}\n                    </Button>\n                  )}\n                </Card.Body>\n              </Card>\n            );\n          })}\n        </CardColumns>\n      </Container>\n    </>\n  );\n};\n\nexport default SearchBooks;\n","// route to get logged in user's info (needs the token)\nexport const getMe = (token) => {\n  return fetch('/api/users/me', {\n    headers: {\n      'Content-Type': 'application/json',\n      authorization: `Bearer ${token}`,\n    },\n  });\n};\n\nexport const createUser = (userData) => {\n  return fetch('/api/users', {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json',\n    },\n    body: JSON.stringify(userData),\n  });\n};\n\nexport const loginUser = (userData) => {\n  return fetch('/api/users/login', {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json',\n    },\n    body: JSON.stringify(userData),\n  });\n};\n\n// save book data for a logged in user\nexport const saveBook = (bookData, token) => {\n  return fetch('/api/users', {\n    method: 'PUT',\n    headers: {\n      'Content-Type': 'application/json',\n      authorization: `Bearer ${token}`,\n    },\n    body: JSON.stringify(bookData),\n  });\n};\n\n// remove saved book data for a logged in user\nexport const deleteBook = (bookId, token) => {\n  return fetch(`/api/users/books/${bookId}`, {\n    method: 'DELETE',\n    headers: {\n      authorization: `Bearer ${token}`,\n    },\n  });\n};\n\n// make a search to google books api\n// https://www.googleapis.com/books/v1/volumes?q=harry+potter\nexport const searchGoogleBooks = (query) => {\n  return fetch(`https://www.googleapis.com/books/v1/volumes?q=${query}`);\n};\n","import React from \"react\";\nimport {\n  Jumbotron,\n  Container,\n  CardColumns,\n  Card,\n  Button,\n} from \"react-bootstrap\";\nimport { useQuery, useMutation } from \"@apollo/client\";\n\nimport { GET_ME } from \"../utils/queries\";\nimport { REMOVE_BOOK } from \"../utils/mutations\";\n\nimport Auth from \"../utils/auth\";\nimport { removeBookId } from \"../utils/localStorage\";\n\nconst SavedBooks = () => {\n  const { loading, data } = useQuery(GET_ME);\n  const [removeBook, { error }] = useMutation(REMOVE_BOOK);\n  const userData = data?.me || {};\n  console.log(userData);\n\n  if (!userData?.username) {\n    return <h4>Please log in to view this page.</h4>;\n  }\n\n  const handleDeleteBook = async (bookId) => {\n    const token = Auth.loggedIn() ? Auth.getToken() : null;\n\n    if (!token) {\n      return false;\n    }\n    try {\n      await removeBook({\n        variables: { bookId },\n      });\n      if (error) {\n        throw new Error(\"Uh oh! Something didn't work right.\");\n      }\n\n      removeBookId(bookId);\n    } catch (err) {\n      console.error(err);\n    }\n  };\n\n  // if data isn't here yet, say so\n  if (loading) {\n    return <h2>LOADING SAVED BOOKS...</h2>;\n  }\n\n  return (\n    <>\n      <Jumbotron fluid className=\"text-light bg-dark\">\n        <Container>\n          <h1>Viewing saved books!</h1>\n        </Container>\n      </Jumbotron>\n      <Container>\n        <h2>\n          {userData.savedBooks.length\n            ? `Viewing ${userData.savedBooks.length} saved ${\n                userData.savedBooks.length === 1 ? \"book\" : \"books\"\n              }:`\n            : \"You have no saved books!\"}\n        </h2>\n        <CardColumns>\n          {userData.savedBooks.map((book) => {\n            return (\n              <Card key={book.bookId} border=\"dark\">\n                {book.image ? (\n                  <Card.Img\n                    src={book.image}\n                    alt={`The cover for ${book.title}`}\n                    variant=\"top\"\n                  />\n                ) : null}\n                <Card.Body>\n                  <Card.Title>{book.title}</Card.Title>\n                  <p className=\"small\">Authors: {book.authors}</p>\n                  <Card.Text>{book.description}</Card.Text>\n                  <Button\n                    className=\"btn-block btn-danger\"\n                    onClick={() => handleDeleteBook(book.bookId)}\n                  >\n                    Delete this Book!\n                  </Button>\n                </Card.Body>\n              </Card>\n            );\n          })}\n        </CardColumns>\n      </Container>\n    </>\n  );\n};\n\nexport default SavedBooks;\n","import React, { useState } from \"react\";\nimport { Form, Button, Alert } from \"react-bootstrap\";\n\nimport Auth from \"../utils/auth\";\nimport { useMutation } from \"@apollo/client\";\nimport { ADD_USER } from \"../utils/mutations\";\n\nconst SignupForm = () => {\n  // set initial form state\n  const [userFormData, setUserFormData] = useState({\n    username: \"\",\n    email: \"\",\n    password: \"\",\n  });\n  // set state for form validation\n  const [validated] = useState(false);\n  // set state for alert\n  const [showAlert, setShowAlert] = useState(false);\n\n  const [addUser, { error }] = useMutation(ADD_USER);\n\n  const handleInputChange = (event) => {\n    const { name, value } = event.target;\n    setUserFormData({ ...userFormData, [name]: value });\n  };\n\n  const handleFormSubmit = async (event) => {\n    event.preventDefault();\n\n    // check if form has everything (as per react-bootstrap docs)\n    const form = event.currentTarget;\n    if (form.checkValidity() === false) {\n      event.preventDefault();\n      event.stopPropagation();\n    }\n\n    try {\n      const { data } = await addUser({\n        variables: { ...userFormData },\n      });\n\n      console.log(data);\n      Auth.login(data.addUser.token);\n    } catch (err) {\n      console.error(err);\n      setShowAlert(true);\n    }\n\n    setUserFormData({\n      username: \"\",\n      email: \"\",\n      password: \"\",\n    });\n  };\n\n  return (\n    <>\n      {/* This is needed for the validation functionality above */}\n      <Form noValidate validated={validated} onSubmit={handleFormSubmit}>\n        {/* show alert if server response is bad */}\n        <Alert\n          dismissible\n          onClose={() => setShowAlert(false)}\n          show={showAlert}\n          variant=\"danger\"\n        >\n          Something went wrong with your signup!\n        </Alert>\n\n        <Form.Group>\n          <Form.Label htmlFor=\"username\">Username</Form.Label>\n          <Form.Control\n            type=\"text\"\n            placeholder=\"Your username\"\n            name=\"username\"\n            onChange={handleInputChange}\n            value={userFormData.username}\n            required\n          />\n          <Form.Control.Feedback type=\"invalid\">\n            Username is required!\n          </Form.Control.Feedback>\n        </Form.Group>\n\n        <Form.Group>\n          <Form.Label htmlFor=\"email\">Email</Form.Label>\n          <Form.Control\n            type=\"email\"\n            placeholder=\"Your email address\"\n            name=\"email\"\n            onChange={handleInputChange}\n            value={userFormData.email}\n            required\n          />\n          <Form.Control.Feedback type=\"invalid\">\n            Email is required!\n          </Form.Control.Feedback>\n        </Form.Group>\n\n        <Form.Group>\n          <Form.Label htmlFor=\"password\">Password</Form.Label>\n          <Form.Control\n            type=\"password\"\n            placeholder=\"Your password\"\n            name=\"password\"\n            onChange={handleInputChange}\n            value={userFormData.password}\n            required\n          />\n          <Form.Control.Feedback type=\"invalid\">\n            Password is required!\n          </Form.Control.Feedback>\n        </Form.Group>\n        <Button\n          disabled={\n            !(\n              userFormData.username &&\n              userFormData.email &&\n              userFormData.password\n            )\n          }\n          type=\"submit\"\n          variant=\"success\"\n        >\n          Submit\n        </Button>\n      </Form>\n      {error && <div>Something went wrong...</div>}\n    </>\n  );\n};\n\nexport default SignupForm;\n","// see SignupForm.js for comments\nimport React, { useState } from \"react\";\nimport { Form, Button, Alert } from \"react-bootstrap\";\n\nimport Auth from \"../utils/auth\";\nimport { useMutation } from \"@apollo/client\";\nimport { LOGIN_USER } from \"../utils/mutations\";\n\nconst LoginForm = () => {\n  const [userFormData, setUserFormData] = useState({ email: \"\", password: \"\" });\n  const [validated] = useState(false);\n  const [showAlert, setShowAlert] = useState(false);\n  const [loginUser] = useMutation(LOGIN_USER);\n\n  const handleInputChange = (event) => {\n    const { name, value } = event.target;\n    setUserFormData({ ...userFormData, [name]: value });\n  };\n\n  const handleFormSubmit = async (event) => {\n    event.preventDefault();\n\n    // check if form has everything (as per react-bootstrap docs)\n    const form = event.currentTarget;\n    if (form.checkValidity() === false) {\n      event.preventDefault();\n      event.stopPropagation();\n    }\n\n    try {\n      const { data } = await loginUser({\n        variables: { ...userFormData },\n      });\n\n      console.log(data);\n      Auth.login(data.login.token);\n    } catch (err) {\n      console.error(err);\n      setShowAlert(true);\n    }\n\n    setUserFormData({\n      username: \"\",\n      email: \"\",\n      password: \"\",\n    });\n  };\n\n  return (\n    <>\n      <Form noValidate validated={validated} onSubmit={handleFormSubmit}>\n        <Alert\n          dismissible\n          onClose={() => setShowAlert(false)}\n          show={showAlert}\n          variant=\"danger\"\n        >\n          Something went wrong with your login credentials!\n        </Alert>\n        <Form.Group>\n          <Form.Label htmlFor=\"email\">Email</Form.Label>\n          <Form.Control\n            type=\"text\"\n            placeholder=\"Your email\"\n            name=\"email\"\n            onChange={handleInputChange}\n            value={userFormData.email}\n            required\n          />\n          <Form.Control.Feedback type=\"invalid\">\n            Email is required!\n          </Form.Control.Feedback>\n        </Form.Group>\n\n        <Form.Group>\n          <Form.Label htmlFor=\"password\">Password</Form.Label>\n          <Form.Control\n            type=\"password\"\n            placeholder=\"Your password\"\n            name=\"password\"\n            onChange={handleInputChange}\n            value={userFormData.password}\n            required\n          />\n          <Form.Control.Feedback type=\"invalid\">\n            Password is required!\n          </Form.Control.Feedback>\n        </Form.Group>\n        <Button\n          disabled={!(userFormData.email && userFormData.password)}\n          type=\"submit\"\n          variant=\"success\"\n        >\n          Submit\n        </Button>\n      </Form>\n    </>\n  );\n};\n\nexport default LoginForm;\n","import React, { useState } from 'react';\nimport { Link } from 'react-router-dom';\nimport { Navbar, Nav, Container, Modal, Tab } from 'react-bootstrap';\nimport SignUpForm from './SignupForm';\nimport LoginForm from './LoginForm';\n\nimport Auth from '../utils/auth';\n\nconst AppNavbar = () => {\n  // set modal display state\n  const [showModal, setShowModal] = useState(false);\n\n  return (\n    <>\n      <Navbar bg='dark' variant='dark' expand='lg'>\n        <Container fluid>\n          <Navbar.Brand as={Link} to='/'>\n            Google Books Search\n          </Navbar.Brand>\n          <Navbar.Toggle aria-controls='navbar' />\n          <Navbar.Collapse id='navbar'>\n            <Nav className='ml-auto'>\n              <Nav.Link as={Link} to='/'>\n                Search For Books\n              </Nav.Link>\n              {/* if user is logged in show saved books and logout */}\n              {Auth.loggedIn() ? (\n                <>\n                  <Nav.Link as={Link} to='/saved'>\n                    See Your Books\n                  </Nav.Link>\n                  <Nav.Link onClick={Auth.logout}>Logout</Nav.Link>\n                </>\n              ) : (\n                <Nav.Link onClick={() => setShowModal(true)}>Login/Sign Up</Nav.Link>\n              )}\n            </Nav>\n          </Navbar.Collapse>\n        </Container>\n      </Navbar>\n      {/* set modal data up */}\n      <Modal\n        size='lg'\n        show={showModal}\n        onHide={() => setShowModal(false)}\n        aria-labelledby='signup-modal'>\n        {/* tab container to do either signup or login component */}\n        <Tab.Container defaultActiveKey='login'>\n          <Modal.Header closeButton>\n            <Modal.Title id='signup-modal'>\n              <Nav variant='pills'>\n                <Nav.Item>\n                  <Nav.Link eventKey='login'>Login</Nav.Link>\n                </Nav.Item>\n                <Nav.Item>\n                  <Nav.Link eventKey='signup'>Sign Up</Nav.Link>\n                </Nav.Item>\n              </Nav>\n            </Modal.Title>\n          </Modal.Header>\n          <Modal.Body>\n            <Tab.Content>\n              <Tab.Pane eventKey='login'>\n                <LoginForm handleModalClose={() => setShowModal(false)} />\n              </Tab.Pane>\n              <Tab.Pane eventKey='signup'>\n                <SignUpForm handleModalClose={() => setShowModal(false)} />\n              </Tab.Pane>\n            </Tab.Content>\n          </Modal.Body>\n        </Tab.Container>\n      </Modal>\n    </>\n  );\n};\n\nexport default AppNavbar;\n","import React from \"react\";\nimport { BrowserRouter as Router, Switch, Route } from \"react-router-dom\";\nimport SearchBooks from \"./pages/SearchBooks\";\nimport SavedBooks from \"./pages/SavedBooks\";\nimport Navbar from \"./components/Navbar\";\nimport { ApolloProvider, ApolloClient, InMemoryCache } from \"@apollo/client\";\n\nconst client = new ApolloClient({\n  uri: \"/graphql\",\n  cache: new InMemoryCache(),\n});\n\nfunction App() {\n  return (\n    <ApolloProvider client={client}>\n      <Router>\n        <>\n          <Navbar />\n          <Switch>\n            <Route exact path=\"/\" component={SearchBooks} />\n            <Route exact path=\"/saved\" component={SavedBooks} />\n            <Route render={() => <h1 className=\"display-2\">Wrong page!</h1>} />\n          </Switch>\n        </>\n      </Router>\n    </ApolloProvider>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}